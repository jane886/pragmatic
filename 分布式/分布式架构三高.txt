高并发，数据库设计，性能缓存等偏基础层


分布式架构中的三高：高并发、高可用、高性能

关于高并发
1，高并发场景
 互联网的高速发展，使得架构设计和软件设计的关注点从如何实现复杂的业务逻辑，转变为如何满足大量用户的高并发访问请求
一个逻辑处理过程，如果一旦面对大量的用户访问，整个技术挑战就会变得完全不同，

2，架构策略
 2.1，垂直伸缩
 -- 提升单台服务器的处理能力
 比如用更快更多核的 cpu，更大内存，但是垂直伸缩带来的价格成本和服务器的处理能力不一定呈线性关系
 增加更多费用，并不能带来同样的计算能力；但是计算能力越大，需要花费的钱就越多，而且受限于硬件，计算能力也不能无限增加

 2.2，水平伸缩
 使用更多的机器，将这些服务器构成一个分布式集群，通过集群对外统一提供服务，以此来提高系统整体的处理能力


分布式技术方案：
1，分布式缓存
2，负载均衡
3，反向代理和 CDN
4，分布式消息队列
5，分布式数据库
6，分布式文件
7，搜索引擎
8，微服务

将这些分布式技术整合起来，就是分布式架构方案
1，海量数据的存储，主要通过分布式数据库、分布式文件系统解决
2，直接在数据库上查询已经无法满足这些数据的查询性能要求，还需要部署独立的搜索引擎提供查询服务
3，同时减少数据中心的网络带宽压力，提供更好的用户访问延时，使用 cdn 和反向代理提供前置缓存，尽快返回静态文件资源给用户
4，为了使得各个子系统更灵活更易于扩展，则使用分布式消息队列将相关子系统解耦，通过消息发布订阅完成子系统的协作
5，使用微服务将逻辑上独立的模块在物理上也独立部署，单独维护，应用系统通过组合多个微服务完成自己的业务逻辑，实现模块更高级别
 的复用，从而更快速地开发和维护系统


关于高性能
 互联网的高速发展，使得架构设计和软件设计的关注点从如何实现复杂的业务逻辑，转变为如何满足大量用户的高并发访问请求

 衡量指标
 4 个性能指标：并发数不变，响应时间足够快，单位时间在吞吐量就会相应的提高
    1，并发数：系统同时处理的请求数。反映系统负载
    2，响应时间：指从发出请求开始到收到最好响应数据所需要的时间。反映系统快慢
    3，吞吐量：单位时间内，系统处理请求的数量。体现系统处理能力
    http 请求数：hps
    每秒事务数：tps
    每秒查询数：qps

    4，性能计数器：
    系统负载
    对象和线程数
    内存使用
    CPU 使用
    磁盘和网络

 性能测试：
    1，性能测试
    2，负载测试
    3，压力测试
    4，稳定性测试

 性能优化过程
    1，性能测试
    2，性能分析
    3，性能优化
    4，性能测试
    5，是否符合预期性能目标

 性能优化策略
    1，数据中心优化
    2，硬件优化
    3，基础组件优化
    4，架构优化（缓存、消息队列、集群
    5，代码优化（使用合理的数据结构、编写性能更好的 sql 语句、实现异步方法调用


关于高可用
web 应用在各种情况下都有可能不可访问、不就是不可用，比如应用服务器和数据库宕机、程序 bug、程序升级重启服务不可用，还有外部环境
引发的不可用，比如促销带来的大量用户访问，导致系统并发压力太大而崩溃，甚至黑客攻击、机房火灾各种情况导致的应用不可用
而互联网的高可用是说，在上面各种情况下，应用都要是可用的，用户都能够正常访问系统，完成业务处理

    衡量指标：
    业界通常用多少个 9 来说明互联网应用的可用性
    可用性 = （1 - 年度不可用时间 / 年度总时间）* 100%

    两个 9：系统基本可用，年度不可用时间小于 88 小时
    三个 9：系统较高可用，年度不可用时间小于 9 个小时
    四个 9：具有自动恢复能力的高可用小于 1 小时
    五个 9：极高的可用性，年度不可用时间小于 5 分钟

    淘宝、百度、微信差不多都是四个 9 的可用性

    架构策略：
    1，提高应灾能力：
        冗（rong 第三声）余备份：数据库主从复制
        负载均衡
        异地多活
    2，保护策略：
        失败隔离：限制影响范围
        限流降级