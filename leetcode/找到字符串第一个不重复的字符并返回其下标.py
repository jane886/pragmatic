# 要找到字符串中第一个不重复的字符并返回其下标，可以使用哈希表（字典）来记录每个字符出现的次数，并遍历字符串找到第一个出现次数为1的字符。

# 在上述代码中，首先创建了一个字典 char_count，用于记录每个字符出现的次数。
# 然后，通过遍历字符串 s，更新字典中每个字符的计数。
# 接下来，再次遍历字符串，找到第一个出现次数为1的字符，并返回其下标。
# 如果没有找到不重复的字符，则返回-1。

# 请注意，上述代码将字符串遍历两次，因此时间复杂度为O(n)，其中n是字符串的长度。通过使用哈希表来记录字符计数，可以实现高效的查找操作，提高算法的性能。
# 上述代码的空间复杂度为O(n)，其中n是字符串的长度。

# 在代码中，使用了一个字典 char_count 来记录每个字符出现的次数。字典的大小取决于字符串中不同字符的数量，最坏情况下可以达到字符串长度的大小。因此，字典所占用的空间复杂度为O(n)。
# 除了字典之外，代码中没有使用其他额外的数据结构，所以除了字典的空间复杂度外，没有额外的空间开销。
# 因此，总体上，代码的空间复杂度为O(n)，与字符串的长度成正比。


def first_unique_char(s: str) -> int:
    char_count = {}  # 字符计数的哈希表

    # 遍历字符串，记录每个字符出现的次数
    for char in s:
        char_count[char] = char_count.get(char, 0) + 1

    # 再次遍历字符串，找到第一个出现次数为1的字符
    for i, char in enumerate(s):
        if char_count[char] == 1:
            return i

    # 如果没有找到不重复的字符，返回-1
    return -1


# 测试代码
s = "loveleetcode"
print(first_unique_char(s))  # 输出：2

# 使用示例:
s = "leetcode"
index = first_unique_char(s)
print(index)  # 输出：0