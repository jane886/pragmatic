"""


epoll 和 select 的一个区别

    epoll 和 select 都是 Linux 系统中用于 I/O 多路复用的技术。他们的主要目的是允许程序同时监控多个文件描述符（如套接字），
    以便在其中一个或多个描述符就绪时（可读、可写或错误状态）进行处理。尽管它们都可以实现这一功能，但它们之间存在一些差异

    1，实现方式
        select：select 基于轮询的方式实现，每次调用 select 时，需要将所有需要监控的文件描述符集合传递给内核。内核会遍历整个集合，
        检查每个文件描述符的状态，然后返回就绪的描述符集合。这种方式在文件描述符数量较少时效率尚可，但随着描述符数量的增加，遍历整个
        集合的时间开销会变得很大

        epoll：epoll 基于事件驱动的方式实现。与 select 不同，epoll 在内核中维护一个时间表，程序只需在文件描述符状态发生变化时
        向事件表中注册、修改或删除事件。当调用 epoll_wait 函数时，内核只需要返回已经就绪的事件，而不需要遍历整个文件描述符集合。
        因此，随着监控的文件描述符数量的增加，epoll 的性能会更好

    2，可扩展性
        select：select 的文件描述符集合大小有限，通常受 FD_SETSIZE 宏（默认值是 1024）的限制。当需要监控的文件描述符数量超过
        此限制时，需要对 select 进行扩展或者使用其他方法

        epoll：epoll 没有固定的文件描述符数量限制，可以根据需要动态调整。这使得 epoll 更具可扩展性，尤其适合处理大量并发连接

    3，触发模式
        select：select 只支持水平触发（level-triggered）模式。这意味着，只要文件描述符状态满足条件，select 就会不断触发。
        在处理 I/O 事件时，需要确保所有可用数据都被读取或写入，否则会导致频繁触发，进而影响性能

        epoll：epoll 支持水平触发（level-triggered）和边缘触发（edge-triggered）模式。边缘触发模式只在文件描述符状态发生变化时
        触发，因此可以减少不必要的触发次数，提高性能。但边缘触发模式需要更加小心的处理 I/O 事件，以避免丢失事件

    总之，epoll 相较于 select 具有更好的性能、更高的可扩展性和更灵活的触发模式。在处理大量并发连接的场景下，epoll 是更好的选择。
    然而，在某些简单的场景或跨平台的程序中，select 仍然是一个可靠且易于使用的选项

"""