当创建自定义控制器时，一个经典的示例是创建一个自定义资源（Custom Resource）和相应的控制器来管理该资源。
以下是一个示例，演示如何创建一个名为"Foo"的自定义资源和一个控制器来管理它：

    定义自定义资源（CRD）：首先，您需要定义自定义资源的规范。创建一个名为"foo.yaml"的文件，并添加以下内容：
    ```
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
        name: foos.sample.com
        spec:
        group: sample.com
        version: v1
        scope: Namespaced
        names:
            plural: foos
            singular: foo
            kind: Foo
    ```

    通过执行以下命令将自定义资源定义应用到集群中：
        kubectl apply -f foo.yaml

    编写控制器代码：使用Go语言和client-go库编写控制器代码。创建一个名为"controller.go"的文件，并添加以下代码：
    ```
        package main

        import (
            "fmt"
            "os"
            "os/signal"
            "syscall"
            "time"

            corev1 "k8s.io/api/core/v1"
            metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
            "k8s.io/client-go/kubernetes"
            "k8s.io/client-go/tools/cache"
            "k8s.io/client-go/tools/clientcmd"
        )

        func main() {
            config, err := clientcmd.BuildConfigFromFlags("", clientcmd.RecommendedConfigPath)
            if err != nil {
                panic(err.Error())
            }

            clientset, err := kubernetes.NewForConfig(config)
            if err != nil {
                panic(err.Error())
            }

            fmt.Println("Custom Controller started")

            stopCh := make(chan struct{})
            defer close(stopCh)

            // 创建Informer，用于监听Foo资源的事件
            informer := createInformer(clientset)

            // 注册事件处理函数
            informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
                AddFunc:    handleAddFoo,
                UpdateFunc: handleUpdateFoo,
                DeleteFunc: handleDeleteFoo,
            })

            go informer.Run(stopCh)

            // 等待中断信号，优雅地停止控制器
            signalCh := make(chan os.Signal, 1)
            signal.Notify(signalCh, syscall.SIGINT, syscall.SIGTERM)
            <-signalCh
        }

        func createInformer(clientset *kubernetes.Clientset) cache.SharedIndexInformer {
            informerFactory := cache.NewSharedIndexInformer(
                &cache.ListWatch{
                    ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
                        return clientset.CoreV1().Pods("").List(options)
                    },
                    WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
                        return clientset.CoreV1().Pods("").Watch(options)
                    },
                },
                &corev1.Pod{},
                time.Second*0,
                cache.Indexers{},
            )

            return informerFactory
        }

        func handleAddFoo(obj interface{}) {
            foo := obj.(*corev1.Pod)
            fmt.Printf("New Foo added: %s\n", foo.Name)
            // 在这里添加处理逻辑
        }

        func handleUpdateFoo(oldObj, newObj interface{}) {
            foo := newObj.(*corev1.Pod)
            fmt.Printf("Foo updated: %s\n", foo.Name)
            // 在这里添加处理逻辑
        }

        func handleDeleteFoo(obj interface{}) {
            foo := obj.(*corev1.Pod)
            fmt.Printf("Foo deleted: %s\n", foo.Name)
            // 在这里添加处理逻辑
        }
    ```

    构建和部署控制器：构建控制器的可执行文件，并将其部署到Kubernetes集群中。执行以下命令来构建二进制文件：
        go build -o controller

    然后，将生成的控制器二进制文件和相关的配置文件打包为一个容器镜像，并将其推送到容器镜像仓库。

    部署控制器：创建一个名为"controller.yaml"的文件，并添加以下内容：
    ```
        apiVersion: apps/v1
        kind: Deployment
        metadata:
        name: foo-controller
        spec:
        replicas: 1
        selector:
            matchLabels:
            app: foo-controller
        template:
            metadata:
            labels:
                app: foo-controller
            spec:
            containers:
            - name: foo-controller
                image: <your-controller-image>
                imagePullPolicy: Always
                command: ["./controller"]
    ```
    将<your-controller-image>替换为您的控制器镜像的地址。

    通过执行以下命令将控制器部署到集群中：
        kubectl apply -f controller.yaml
    
    控制器将会自动运行，并开始监听和处理Foo资源的事件。

这是一个简单的示例，演示了如何创建一个自定义资源和相应的控制器来管理它。
您可以根据需要扩展控制器的逻辑，处理Foo资源的事件，并执行自定义操作。