第 19 章  -- 黑衣团队

黑衣团队的例子 ----

二十世纪六十年代，一家生产商用电脑的小公司，交付的软件实在不怎么样，总是缺陷不断

当时公司花了不少精力培训客户，期望他们容忍缺陷，这个方法没有奏效

于是公司要求程序员在交付之前消除所有的缺陷，但程序员们都信心满满地认为自己写的程序是最好的，他们尝试寻找缺陷，但找不到。

管理者发现一些程序员发现问题的效果比别人高 10% - 20%，于是把他们组成一个小组，让他们做测试工作。

这些人都对找出软件的问题有浓厚兴趣，组成小组后，他们把所有的时间、午餐时间、业余时间都花在测试上。

很快，这个组的测试能力就比他人高出数倍到数十倍，他们对自己的工作产生一种强烈的自豪感。

他们甚至开始自发地穿黑色衣服上班，尽管公司要求着白衬衫蓝上衣，但管理者容忍了他们的存在。

程序员某种程度上对黑衣小组很尊敬，但更多是畏惧，程序员最不希望出现在面前的人就是黑衣小组。

尽管黑衣小组令人恐怖，但人人都希望成为小组成员。当一个成员离开时，团队会寻找一个替补者。

最终全部原班人马都离开了小组，但黑衣小组仍然存在，这种动力和效能延续了下来。

这件事情成为了计算机产业的一个传奇


胶冻团队一般来说都是组织中的精英团队。
团队中的成员会为他们的产品和成果感到自豪，并且有种心理上的“优越感”，觉得其他人无法交付像他们那样高品质的产品。
而这种团队整体的精英意识，又反过来会促使团队中的每个个体做得比一般人强。


这一篇主要介绍了团队合作的重要性，以及如何提高团队的生产力。
在我们大多数珍视的工作记忆中，让人印象最深刻的是团队的交互作用。
挑战是使我们走到一起的工具，在最出色的的工作小组里，人们最开心，并且最大限度地完成工作，这时团队交互作用就是一切。
它们是人们忍受挑战，将他们的所有精力投入到工作中，克服巨大障碍的原因。胶冻团队是一群紧密结合在一起的人，其整体大于部分的总和。
同样重要的是，人们从工作中得到的快乐比你所期望的工作内在本身的本质所给予的要多。
在一些情况下，面对其他人可能认为无趣的任务时，冻胶团队也会觉得是一种不平凡的经历。
因此，作为经理，要努力使员工形成一个冻胶团队。一个团队的目的不是达到目标而是向目标看齐。
如果团队正在实现其目标，团队成员会更有效率，因为他们更有方向。
 一些标志标明冻胶团队已经出现：在项目过程中和在任务确定好了的过程中人员的低流动率，团队成员在工作完成之前不去任何地方。
 在冻胶之前最重要的事情（例如钱、阶层、晋升的位置），在冻胶之后就不怎么重要或根本不重要了。
 人们不可能因为一丁点想法离开他们的团队，例如更多的一点薪水。
 时间的分割对团队的形成不利，对工作效率也不利。
 没有人可以成为多个胶冻团队的成员，胶冻团队的紧密人际互动的排他的。太多分割的团队不会胶冻。
 因此，作为团队管理人员，我们有必要尽量减少这种方案。
 最好的成功是没有明显管理的成功，在这样的成功中，团队工作起来如同一个亲切的同事集体。
 最好的老板是能一遍又一遍地管理这个集体，而又不让团队成员知道他们已经“被管理了”。
 在最好的公司里，每个员工都被认为有一些特殊领域的专业知识，并且被公认为那个领域的自然权威，在这样的思想开放式管理氛围中，更可能产生胶冻团队。



在本章中，我们列举一些阻止胶冻团队形成的做法，同时也给出鼓励胶冻团队形成的做法。
软件经理遏制胶冻团队形成的做法:
    防范式管理：对手下的员工的能力不信任，担心他们缺了自己的指导就会把事情搞砸，担心他们的头脑没有自己“聪明”而无法想出好办法，因此总是给项目事务插进自己的“高见”，给团队加上各种规则，防止员工犯错。
    物理隔离：把本该在一起紧密工作的人从物理上隔开。
    员工的时间分割：让员工同时参与四、五个项目。
    要求降低产品质量：无视团队成员对于产品和成果抱有的那份情感。更恶劣的是，在项目进度的压力下，还会要求团队成员牺牲产品质量换取进度。
    虚张声势的“最后期限”：拿虚张声势的“最后期限”吓唬员工，要求员工为之加班加点地工作。
    私党控制：因为软件经理感觉自己的地位受到挑战和威胁，所以或暗中或露骨地破坏和拆散团队。

软件经理鼓励胶冻团队形成的做法:
    信任员工的能力，放手让他们开支脑筋去想问题。不拿条条框框，尤其是不拿自己的意见去左右手下的员工，鼓励员工尝试，哪怕最后会犯错。
    把经常在一起紧密工作的人安排到一起，让他们有机会多相互接触，相互了解，培养起团队的亲和力和默契感。
    让员工在某一时段只参与一个项目，让他跟项目团队中的其他成员有充分的时间交流，从而形成胶冻。
    完全理解并支持员工珍视产品质量的情感。当进度压力袭来时，替员工承受压力，保证他们交付高品质的产品。
    让员工自己制定进度。甚至更好的方法是不给团队施加任何的进度压力，让员工完全自主地决定进度。
    努力维持团队成员的稳定性。项目可以结束，但团队人员仍属于同一个团队，共同迎接下一个项目。


好的软件经理会为团队提供频繁而又容易一起实现成功的机会。
这些机会可以是很小的预研性质的子项目，可以是一些示范或暗示，可以是使团队快速养成一起去获得成功的习惯的任何事情。
好的软件经理的管理方式就是“润物细无声”，让手下的程序员感觉不到“被管理”，而只是感觉到在这个团队中能够和其他同事一起取得成功。