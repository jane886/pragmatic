在阅读这本书之前，自己也曾完成过几个中小型项目，其中踩过很多很多的坑。

包括项目前期没有进行详细规划、缺少项目构思和设计文档，直接按照需求开始编码，不仅导致我在之后编码缺少指引，严重时还会导致自己需要推翻之前的工作重新编码；
编码时不注重代码规范，导致代码可读性差，在项目后期需要拓展功能和维护时，自己都不想读自己写的代码；
以及编码时很少与优化自己代码性能。

以上踩过的坑为自己提供了丰富的经验和教训，在阅读《代码大全》时，无论是惨痛的教训还是宝贵的经验都在这本经典之著上得到了印证。
感觉踩过的坑越多，阅读《代码大全》时就越有收获。
阅读《代码大全》之后印象最深的是，项目中的代码在初步完成之后，往往后续还需要不断的迭代，
这意味着我们编写的代码之后还会被大量的阅读，因此在编写的时候应该尽量提高代码的可读性。

因为人脑智力是有限的，所以我们需要对项目工程中的复杂度进行管理。
《代码大全》从如何取变量名、选取何种数据结构等编程基本要素，到如何组织语句顺序、设计循环等结构设计，
最后到子程序和类的设计、代码调整策略和方法都有着非常具体地介绍。

所谓的复杂度管理，就是尽可能降低项目中的复杂度，让代码的作者和使用者都能轻易弄懂代码的真实意图。
要做到降低项目的复杂度，《代码大全》给出了不少的建议，自我总结为以下两点：
    提高代码的可读性，因为代码总归是写给自己和协作者看的，为了之后便于修改和扩展，提高代码的可读性能降低之后的维护成本和错误率。
    将项目进行分割，作者提出人类脑力有限，一次只能高效处理小部分工作，那我们就需要对项目进行分割。
        从代码语句级别来说我们要尽力减短变量的生命周期，让人们注意力集中在代码的一小段。
        从子程序和类的设计来说，我们需要做到高内聚。每个子程序只完成一个特定的任务，每个类中的子程序完成的任务都是紧密相关的。