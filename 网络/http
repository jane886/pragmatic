-- HTTP -- 超文本传输协议(Hypertext Transfer Protocol)

HTTP 是一种无连接，无状态的网络协议。默认使用 80 端口
无连接，指客户端与服务端每次请求响应后即断开连接；
无状态，指客户端与服务端每次请求响应的连接都是独立的，服务端并不会保存和跟踪客户端上一次
    请求的任何文本与信息，对于客户端的前后两次请求，服务端并不能区分是同一个客户端发起，
    所以说无状态。

请求流程：
    通常，由客户端发起一个请求，按照协议规定好的格式
    （请求头和 body，请求头里包含版本号，请求路径和请求主机以及其他信息），
    创建一个到服务端指定端口的 TCP 连接。
    服务端则在该端口监听请求。一旦收到请求，服务器处理完后，返回给客户端，同样也是按照
    规定好的格式（响应头和 body，响应头里包含版本号，状态码，状态码描述和其他信息）


### HTTP 协议属于七层协议的哪一层

HTTP（HyperText Transfer Protocol，超文本传输协议）属于 OSI（开放系统互联）模型的第七层，即应用层。
应用层是最靠近用户的一层，负责处理高层应用协议和网络服务，例如文件传输、电子邮件、远程登录等。

HTTP 版本演化：
1，HTTP0.9
    只接受 GET 请求，没有请求头，不能传输太多的信息

2，HTTP1.0
    增加了请求头与响应头。
    同时增加了请求方法（比如 POST），从而能够传输更多的信息与内容

3，HTTP1.1
    默认支持持久连接，允许一个 TCP 请求上可以传送多个请求与响应
    增加了更多 HEADER 头部字段来规范 HTTP1.0 上没有严格定义的说明
    （比如客户端指定 HOST 字段来表示自己想访问哪一个 WEB 站点）

4，HTTP2.0
    多路复用
    压缩 HEADER 字段数据，传输体积变小
    服务器推送




-- HTTPS --

超文本传输安全协议（Hypertext Transfer Protocol Secure）

在 HTTP 的基础上通过传输加密和身份认证保证了传输过程中的安全性，默认使用 443 端口。


为什么有 HTTPS ？

    1, 由于 HTTP 是明文传输，那么我就希望我传输的内容不会被别人窃取；

        因为我们是通过运营商传输内容，那当然未经加密的文本也都能被传输了，
        这也是防火墙如何发现我们发送的内容里有敏感词

    2, 而且，我还希望给我响应的东西就是真正网站给返回的。

        域名本质是个字符串，需要靠dns把域名转换成ip地址。
        假设baidu.com对应的ip是1.1.1.1, abc.com对应的地址是2.2.2.2。
        一旦dns不靠谱，把错误的ip地址给了你，例如你输入baidu.com，
        dns告诉你说这个域名的地址是2.2.2.2，你就来到了abc.com的页面，但是地址栏显示还是baidu.com


怎么解决上面的问题？

    1，加密解密；

        a，对称加密，双方事先拟定一个密码，客户端先对文本加密，然后服务端解密。
        这样有个问题就是假如密码被泄漏了，自然就不安全；

        b，非对称加密，有一种算法能生成一对密钥，就叫他们 A 和 B，用 A 加密的内容，只能 B 解开，
        用 B 加密的内容，只能用 A 能解开。那么只要提前把这对密码中的一个先放到一方手里，双方就也
        可以进行加密的通信了。

    2，身份认证；
        a，对称加密，不可能电脑上都内置了每个网站上的定好的密码，这不现实；

        b，同样，每个网站的非对称密码也不可能内置到电脑上，一样不可行；

        然而我们可以通过一个权威机构，它可以帮助我们认证返回的网站就是我们真正访问的网站。
        1）权威机构有自己的一对密钥 A 和 B，也就是公钥和私钥

        2）服务端提交公钥，域名等相关信息去申请认证

        3）权威机构验证申请者信息的真实性，审核通过后，权威机构会返回给服务端一个证书。
        证书里包含服务端提供的信息和一个签名，签名是对服务端提供的信息进行摘要，并用私钥对
        这个摘要加密的密文。

        4）而电脑上都内置了权威机构的公钥。每次请求时，服务端把证书返回给客户端，客户端
        对证书里服务端的相关信息以同样的算法摘要，并通过权威机构的公钥解密签名得到摘要，
        一对比，就能知道该网站是否权威机构认证的了

    3，内容加密；
        1）当客户端发起请求时，后台返回证书给客户端，客户端以后请求时用证书里包含的
        服务端公钥加密，服务端解密获取请求信息

        2）然后，服务端不能用私钥加密返回文本，因为公钥是每个客户端都能请求获取到的，如果被窃听者截取
        了服务端返回的信息，一样可以解密出来，这就不安全

        3）所以，客户端约定一个对称密码，用公钥加密后给服务端，告诉服务端，以后我们就用这个对称加解密，
        由于没有私钥是不能解密的，窃听者只有公钥，就算获取到请求文本也没有用。

        ----
        4）其实在 https 并不会真正地发送对称加密的密钥。也就是所谓的密钥交换算法。
        这个交换不是说交换证书里的公钥私钥，而是双方先约定好一些数的范围，然后互相发点别人看不懂的信息，
        然后就蹦同时算出一个密码。这个密码才是真正进行对称加密的。这个算法叫 Diffie-Hellman 算法

    4，至此，双方加密通信完成




-- WebSocket --

一种在单个 TCP 连接上客户端跟服务端可以相互推送的通信协议。

特点：
1，性能开销小，这里指的是相对于 http 不用每次请求都建立一个 tcp 连接
2，没有同源限制，即跨域
3，除了可以发文本，也可以开二进制
4，保持连接持久，双方都可以终止连接


为什么有了 HTTP，还要有 WebSocket ？
    最主要的，由于 HTTP 协议只能由客户端发起请求，做不到服务端反过来给客户端推送信息。
    假如客户端需要连续性的去获取信息的状态变化，当服务端有信息更新，客户端只能不停的
    发送请求（轮循），这样增加了建立连接开销，浪费资源，所以，就有了 WebSocket
