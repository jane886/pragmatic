"""


水平触发 和 边缘触发 的区别是什么

    水平触发（level-triggered）
    只要文件描述符关联的读内核缓冲区非空，有数据就可以读取，就一直发出可读信号进行通知
    当文件描述符关联的内核写缓冲区不满，有空间可以写入，就一直发出可写信号进行通知

    水平触发模式支持阻塞和非阻塞两种方式。epoll 默认的模式是水平触发
    水平触发是缺省的工作方式，并发支持阻塞和非阻塞两种方式。在这种做法中，内核告诉你一个文件描述符是否就绪了，
    然后你就可以对这个就绪的文件描述符进行 I/O 操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种
    模式编程出错误可能性要小一点。传统的 select/poll 都是这种模型的代表

    （缺省是指在特定情况下，如果没有指定或设置任何选项或参数，系统或软件会自动采用一些预设的值或行为。）

    边缘触发（edge-triggered）
    当文件描述符关联的读内核缓冲区由空转化为非空的时候，则发出可读信号进行通知
    当文件描述符关联的内核写缓冲区由满转化为不满的时候，则发出可写信号进行通知

    两者的区别是，水平触发是只要读缓冲区有数据，就会一直触发可读信号，而边缘触发仅仅在空变非空的时候通知一次

    举个例子：
    1，读缓冲区刚开始是空的
    2，读缓冲区写入 2kb 数据
    3，水平触发和边缘触发模式此时都会发出可读信号
    4，收到信号通知后，读取了 1kb 数据，读缓冲区还剩余 1KB 数据
    5，水平触发会再次进行通知，而边缘触发不会再进行通知

    所以边缘触发需要一次性的把缓冲区的数据读完为止，也就是一直读，直到读到 EGAIN（EGAIN 说明缓冲区已经空了）为止，
    因为这一点，边缘缓冲区需要设置文件句柄为非阻塞

    边缘触发模式在很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比水平触发模式高。epoll 工作在边缘触发模式的时候，
    必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死

"""