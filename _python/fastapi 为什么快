FastAPI 是一个基于 Python 的现代、快速（高性能）的 Web 框架，具有以下特点：

异步支持：FastAPI 基于 Python 3.7+ 的 asyncio 库，利用异步编程模型提供高性能的并发处理能力。它能够处理大量的并发请求，适用于高负载的应用场景。
高性能：FastAPI 基于 Starlette 框架构建，利用了其底层的高性能组件，如异步请求处理、事件循环机制等。它使用了类型注解和编译时类型检查，以及基于 Pydantic 的数据验证和序列化，从而在运行时实现了高效的数据处理和验证，提供了出色的性能。
快速开发：FastAPI 提供了简洁明快的 API 设计，支持使用 Python 类型提示进行参数验证和自动文档生成。它具有自动的请求和响应模型转换，减少了开发者的工作量，并提高了开发效率。
类型注解和自动文档：FastAPI 基于 Pydantic 提供了强大的类型注解和数据验证功能，能够自动推断请求和响应的模型结构，并生成交互式的 API 文档。开发者可以通过浏览器直接查看和测试 API 接口，提升了开发和调试的便利性。
标准化的 API 接口：FastAPI 遵循了一系列的规范和标准，如 OpenAPI（以前称为 Swagger）和 JSON Schema，使得 API 接口能够与其他工具和框架进行无缝集成，提供了更好的互操作性。
安全性：FastAPI 提供了一些安全性功能，如 OAuth 和 JWT 支持、请求验证和授权等，帮助开发者构建安全可靠的 Web API。
总而言之，FastAPI 之所以快速和高效，是因为它充分利用了 Python 的异步编程能力和现代化的 Web 开发技术，如异步请求处理、类型注解、自动文档生成等。它提供了高性能、快速开发和强大的类型检查等特点，使得开发者能够快速构建高性能的 Web API。


FastAPI 的异步编程模型是如何提高性能
当涉及到网络通信和 I/O 操作时，传统的同步编程模型通常需要等待这些操作完成后才能继续执行下一步操作，这期间线程会被阻塞，无法处理其他任务。这种阻塞式的同步模型在高并发情况下效率较低。

FastAPI 使用异步编程模型来提高性能，具体有以下几个方面的优势：

并发处理：异步编程模型允许任务在等待 I/O 操作完成时暂停执行，而不会阻塞整个应用程序。这使得 FastAPI 能够同时处理多个请求，提供更高的并发性能。当一个请求在等待 I/O 操作时，FastAPI 可以切换到处理其他请求，而不需要等待当前请求完成。
I/O 阻塞解决方案：在传统的同步模型中，当一个请求遇到阻塞的 I/O 操作时，整个线程会被阻塞，无法处理其他任务。而在异步模型中，当一个任务等待 I/O 操作时，它会暂停执行并切换到其他可执行的任务，从而充分利用系统资源，避免了线程被阻塞的情况。
资源利用效率：由于异步模型不需要为每个请求分配一个独立的线程，而是通过事件循环机制在单个线程中管理多个任务，因此可以减少线程的创建和销毁开销，节省了系统资源。这使得 FastAPI 能够处理更多的并发请求，提高了资源利用效率。
非阻塞 I/O：异步编程模型利用非阻塞的 I/O 操作，它们可以在后台进行，而不需要等待操作完成。当一个请求发起一个非阻塞的 I/O 操作时，它可以继续执行后续代码而不需要等待 I/O 操作的结果返回。一旦 I/O 操作完成，FastAPI 可以重新激活任务并继续处理结果。
综上所述，FastAPI 的异步编程模型通过并发处理、解决 I/O 阻塞、高效利用资源以及使用非阻塞 I/O 等方式提高了性能。这使得 FastAPI 能够处理大量并发请求，提供快速响应和高吞吐量的能力，适用于高性能的 Web 应用程序。


Starlette 是一个轻量级的 ASGI 框架和工具包，特别适合用来构建高性能的 asyncio 服务.
Starlette 的主要特性：

性能表现优异
WebSocket 支持.
GraphQL 支持.
进程内的后台任务执行
启动和关闭服务的事件触发
测试客户端构建于 requests.
支持 CORS, GZip, Static Files, Streaming 响应.
支持会话和 Cookie
100% 测试覆盖率
100% 类型注解
无依赖


Uvicorn 是基于 uvloop 和 httptools 构建的非常快速的 ASGI 服务器。
uvicorn 是一个基于 asyncio 开发的一个轻量级高效的 web 服务器框架
uvicorn 设计的初衷是想要实现两个目标：
使用 uvloop 和 httptools 实现一个极速的 asyncio 服务器
实现一个基于 ASGI（异步服务器网关接口）的最小应用程序接口。
它目前支持 http, websockets, Pub/Sub 广播，并且可以扩展到其他协议和消息类型。
uvloop 用于替换标准库 asyncio 中的事件循环，使用 Cython 实现，它非常快，可以使 asyncio 的速度提高 2-4 倍。asyncio 不用我介绍吧，写异步代码离不开它。
