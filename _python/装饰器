装饰器（decorator）是 Python 中的一种设计模式，它允许你在不修改函数或类的定义的情况下，给函数或类增加额外的功能。装饰器本质上是一个高阶函数，它接受一个函数或类作为参数，并返回一个新的函数或类。

### 装饰器的作用

1. **代码重用**：可以将横切关注点（如日志记录、性能计时、访问控制等）抽象成装饰器，方便复用。
2. **增强功能**：可以在不修改原函数或类的情况下，动态地增加功能。
3. **简化代码**：通过装饰器，可以减少重复代码，提高代码的可读性和维护性。

### 基本语法

装饰器通常使用 `@decorator_name` 的语法，放在函数定义的前一行。

```python
@decorator_name
def function_to_decorate():
    pass
```

### 装饰器的实现

#### 函数装饰器

一个简单的函数装饰器示例：

```python
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()
```

输出：

```
Something is happening before the function is called.
Hello!
Something is happening after the function is called.
```

在这个例子中，`my_decorator` 是一个装饰器函数，它接收 `say_hello` 函数作为参数，并返回一个新的 `wrapper` 函数。`wrapper` 函数在调用 `say_hello` 之前和之后添加了一些额外的行为。

#### 带参数的装饰器

如果装饰器需要接受参数，可以再嵌套一层：

```python
def decorator_with_args(arg1, arg2):
    def decorator(func):
        def wrapper(*args, **kwargs):
            print(f"Decorator arguments: {arg1}, {arg2}")
            return func(*args, **kwargs)
        return wrapper
    return decorator

@decorator_with_args("Hello", "World")
def greet(name):
    print(f"Greetings, {name}!")

greet("Alice")
```

输出：

```
Decorator arguments: Hello, World
Greetings, Alice!
```

在这个例子中，`decorator_with_args` 是一个接受参数的装饰器工厂，它返回一个实际的装饰器。

### 类装饰器

类装饰器可以用于增强类的功能：

```python
def class_decorator(cls):
    class Wrapped(cls):
        def new_method(self):
            return "New method added!"
    return Wrapped

@class_decorator
class MyClass:
    def existing_method(self):
        return "Existing method."

obj = MyClass()
print(obj.existing_method())  # 输出: Existing method.
print(obj.new_method())       # 输出: New method added!
```

在这个例子中，`class_decorator` 接受一个类作为参数，并返回一个新的类，该新类继承了原始类并增加了一个新方法。

### functools.wraps

在编写装饰器时，使用 `functools.wraps` 可以保留被装饰函数的元数据（如函数名、文档字符串等），这对于调试和文档生成非常有用。

```python
import functools

def my_decorator(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        print("Something is happening before the function is called.")
        result = func(*args, **kwargs)
        print("Something is happening after the function is called.")
        return result
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

print(say_hello.__name__)  # 输出: say_hello
```

总结一下，装饰器在 Python 中非常有用，可以帮助你在不改变现有代码的情况下添加功能，提高代码的可复用性和可维护性。



装饰器可以用来装饰函数、方法和类，它们在语法和实现上有一些不同。让我们一起探讨这些区别。

### 函数装饰器

#### 语法

装饰函数的装饰器的语法如下：

```python
def decorator(func):
    def wrapper(*args, **kwargs):
        # 这里可以添加装饰功能
        result = func(*args, **kwargs)
        # 这里可以添加装饰功能
        return result
    return wrapper

@decorator
def some_function():
    pass
```

#### 实现

函数装饰器通常接收一个函数作为参数，并返回一个新的函数。新的函数通常是一个封装了原始函数的"包装器"（wrapper），可以在调用原始函数之前和之后添加额外的行为。

```python
def my_decorator(func):
    def wrapper(*args, **kwargs):
        print("Before calling the function.")
        result = func(*args, **kwargs)
        print("After calling the function.")
        return result
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()
```

#### 返回值

装饰函数后的返回值是一个新的函数对象，它封装了原始函数。

### 类装饰器

#### 语法

装饰类的装饰器的语法如下：

```python
def class_decorator(cls):
    class Wrapped(cls):
        # 这里可以添加装饰功能
        pass
    return Wrapped

@class_decorator
class SomeClass:
    pass
```

#### 实现

类装饰器接收一个类作为参数，并返回一个新的类。新的类通常是一个继承了原始类的子类，可以在子类中添加或修改方法和属性。

```python
def class_decorator(cls):
    class Wrapped(cls):
        def new_method(self):
            return "New method added!"
    return Wrapped

@class_decorator
class MyClass:
    def existing_method(self):
        return "Existing method."

obj = MyClass()
print(obj.existing_method())  # 输出: Existing method.
print(obj.new_method())       # 输出: New method added!
```

#### 返回值

装饰类后的返回值是一个新的类对象，通常是原始类的一个子类。

### 比较与总结

1. **参数类型**：
    - **函数装饰器**：接收一个函数作为参数。
    - **类装饰器**：接收一个类作为参数。

2. **返回类型**：
    - **函数装饰器**：返回一个新的函数。
    - **类装饰器**：返回一个新的类。

3. **实现细节**：
    - **函数装饰器**：通常定义一个包装器函数来封装原始函数，可以在调用原始函数之前和之后添加行为。
    - **类装饰器**：通常定义一个新的类继承自原始类，可以添加或修改方法和属性。

4. **使用场景**：
    - **函数装饰器**：用于对函数进行增强，如添加日志记录、性能计时、权限检查等。
    - **类装饰器**：用于对类进行增强，如添加新的方法、修改现有方法的行为等。

### 示例代码

#### 函数装饰器示例

```python
def log_decorator(func):
    def wrapper(*args, **kwargs):
        print(f"Calling {func.__name__}")
        result = func(*args, **kwargs)
        print(f"Called {func.__name__}")
        return result
    return wrapper

@log_decorator
def greet(name):
    print(f"Hello, {name}!")

greet("Alice")
```

输出：

```
Calling greet
Hello, Alice!
Called greet
```

#### 类装饰器示例

```python
def class_decorator(cls):
    class Wrapped(cls):
        def new_method(self):
            return "New method added!"
    return Wrapped

@class_decorator
class MyClass:
    def existing_method(self):
        return "Existing method."

obj = MyClass()
print(obj.existing_method())  # 输出: Existing method.
print(obj.new_method())       # 输出: New method added!
```

通过这些示例和解释，希望你对函数装饰器和类装饰器的实现和用法有了更清晰的理解。