在Go语言中，内存泄漏通常指的是程序在运行时无法释放不再使用的内存，导致内存占用不断增加，最终耗尽系统资源。
下面是一些常用的检查Go语言内存泄漏的方法：

    go tool pprof：Go语言提供了一个性能分析工具pprof，可以用于检查内存泄漏。
        通过在代码中插入runtime/pprof包，并在关键位置调用pprof.WriteHeapProfile函数，可以生成堆内存分析文件。
        然后，使用go tool pprof命令加载分析文件，查看内存分配和释放情况，以及发现潜在的内存泄漏。

    go run -race：Go语言的竞争检查器（race detector）可以用于检测并发程序中的内存泄漏。
        通过在命令行中添加-race标志来运行程序，竞争检查器会检测并报告任何潜在的数据竞争和内存冲突问题，包括内存泄漏。

    go tool trace：Go语言提供了一个跟踪工具trace，可以用于分析应用程序的运行性能和资源使用情况。
        通过在代码中插入runtime/trace包，并在关键位置调用trace.Start和trace.Stop函数，可以生成跟踪文件。
        然后，使用go tool trace命令加载跟踪文件，查看内存分配和释放情况，以及发现潜在的内存泄漏。

    监控工具和性能分析工具：使用监控工具和性能分析工具，如Prometheus、Grafana、Jaeger等，可以实时监测应用程序的内存使用情况，并进行性能分析。
        通过观察内存的增长趋势和分析内存使用模式，可以发现潜在的内存泄漏问题。

    代码审查和代码分析：仔细审查代码，查找可能导致内存泄漏的问题，例如未关闭的文件、未释放的资源、未释放的goroutine等。
        同时，使用静态代码分析工具，如go vet、golint等，可以帮助发现一些常见的内存泄漏和资源管理问题。

需要注意的是，内存泄漏可能是由于程序设计上的问题，例如循环引用、缓存未及时清理等。
因此，在检查内存泄漏时，除了使用工具和分析技术，还应该进行仔细的代码审查和系统设计的评估，以找出并解决潜在的内存泄漏问题。