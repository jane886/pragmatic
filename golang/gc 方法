在Go语言中，垃圾回收（Garbage Collection，简称GC）是自动进行的，开发人员无需显式调用垃圾回收。
Go的垃圾回收器负责自动识别和回收不再使用的内存。

虽然无法直接触发垃圾回收，但Go提供了一些与垃圾回收相关的调优选项和方法，以及一些与垃圾回收相关的包和函数。
下面是一些常用的与Go垃圾回收相关的方法和选项：

    runtime.GC()：该函数可以用于显式触发一次垃圾回收。一般情况下，不建议在应用程序中主动调用此函数，因为Go的垃圾回收器会根据需要自动触发回收。

    runtime.SetGCPercent(percent int)：该函数用于设置垃圾回收的目标百分比。默认情况下，Go的垃圾回收器会尽量保持低延迟，但可能会牺牲一些性能。
        通过调整目标百分比，可以权衡延迟和性能。

    runtime.MemStats：该结构体提供了关于内存使用情况的统计信息，包括堆内存、栈内存、垃圾回收等。
        可以使用runtime.ReadMemStats(&m)来读取当前的内存统计信息。

    runtime/debug包：该包提供了与垃圾回收相关的调试信息，例如查看堆栈跟踪、查找对象的指针等。
        可以使用runtime/debug包中的函数来获取和分析垃圾回收的调试信息。

    GODEBUG环境变量：通过设置GODEBUG环境变量的值，可以启用或禁用一些与垃圾回收相关的调试选项。
        例如，GODEBUG=gctrace=1可以启用垃圾回收的跟踪日志输出。

需要注意的是，大多数情况下，Go的垃圾回收器会自动管理内存，并根据应用程序的需求进行调优。
开发人员通常不需要直接干预垃圾回收过程。然而，如果在特定情况下遇到内存问题或性能瓶颈，可以使用上述方法来了解和调整垃圾回收器的行为。