vllm 

比较重要的有：
    max-num-seqs：默认 256，当 max-num-seqs 比较小时，较迟接收到的 request 会进入 waiting_list，
        直到前面有request 结束后再被添加进生成队列。当 max-num-seqs 太大时，会出现一部分 request 在生成了 3-4 个 tokens 之后，
        被加入到 waiting_list（有些用户出现生成到一半卡住的情况）。
        过大或过小的 max-num-seqs 都会影响用户体验。
    max-num-batched-tokens：很重要的配置，比如你配置了 max-num-batched-tokens=1000 
        那么你大概能在一个 batch 里面处理 10 条平均长度约为 100 tokens 的 inputs。
        max-num-batched-tokens 应尽可能大，来充分发挥 continuous batching 的优势。
        不过似乎（对于 TGI 是这样，vllm 不太确定），在提供 HF 模型时，该 max-num-batched-tokens 能够被自动推导出来

1.2 坑点
    采用 stream: true 进行 steaming 请求时，vllm 提供的默认 API 每次的回复并不是新预测的单词，
        而是目前所有已预测的全部文本内容（history_tokens + new_tokens），这导致回复的内容中包含很多冗余的信息。
    当前 vllm 版本（v0.1.2）加载 *.safetensor 模型时存在问题，请尽量加载 *.bin 格式的模型。
        对于文件夹下同时存放 bin 和 safetensor 权重时，vllm 优先加载 .bin 权重。
    vllm 的 OpenAI-compatible API server 依赖 fschat 提供 prompt template，
        由于 LLM 更新进度快，如果遇到模型 prompt template 在 fschat 中未找到的情况（通常报错为 keyError），
        可以重新安装下 fschat 和 transformers。

从接收 request，到返回回复，大致的过程如下：
    1 vllm 接收到 request 之后，会发放 request_uuid，并将 request 分配到 running, swap, waiting 三个队列当中。
        （参考 vllm.core.scheduler.Scheduler._schedule ）
    2 根据用户等待的时间进行 request 优先级排序。从 running 和 swap队列中选择优先级高的 request 来生成对应的回复，
        由于 decoding 阶段，每次前项传播只预测一个 token，因此 vllm 在进行完一次前项传播（即 one decoding iteration）之后，
        会返回所有新生成的 tokens 保存在每个 request_uuid 下。（参考 vllm.engine.llm_engine.LLMEngine.step）
    3 如果 request 完成了所有的 decoding 步骤，那么将其移除，并返回结果给用户。
    4 更新 running, swap 和 waiting 的 request。
    5 循环执行 2,3,4。


TGI 

特点：
    支持了和 vllm 类似的 continuous batching
    支持了 flash-attention 和 Paged Attention。
    支持了 Safetensors 权重加载。（目前版本的 vllm 在加载部分模型的 safetensors 有问题（比如 llama-2-7B-chat）。
    TGI 支持部署 GPTQ 模型服务，这使得我们可以在单卡上部署拥有 continous batching 功能的，更大的模型。
    支持采用 Tensor Parallelism 部署多 GPU 服务，模型水印等其他功能

通过 text-generation-launcher --help 查看到可配置参数，相对 vllm 来说，TGI 在服务部署上的参数配置更丰富一些，
其中比较重要的有：
    model-id：模型 path 或者 hf.co 的 model_id。
    revision：模型版本，比如 hf.co 里仓库的 branch名称。
    quantize：TGI 支持使用 GPTQ 来部署模型。
    max-concurrent-requests：当服务处于高峰期时，对于更多新的请求，系统会直接返回拒绝请求，（比如返回服务器正忙，请稍后重试），
        而不是将新请求加入到 waiting list 当中。改配置可以有效环节后台服务压力。默认为 128。
    max-total-tokens：相当于模型的 max-tokens
    max-batch-total-tokens：非常重要的参数，他极大影响了服务的吞吐量。该参数与 vllm 中的 max-num-batched-tokens 类似。
        比如你配置了 max-num-batched-tokens=1000：那么你大概能在一个 batch 里面处理 10 条平均长度约为 100 tokens 的 inputs。
        对于传入的 HF 模型，TGI 会自动推理该参数的最大上限，如果你加载了一个 7B 的模型到 24GB 显存的显卡当中，
        你会看到你的显存占用基本上被用满了，而不是只占用了 13GB（7B 模型常见显存占用），
        那是因为 TGI 根据 max-batch-total-tokens 提前对显存进行规划和占用。
        但对于量化模型，该参数需要自己设定，设定时可以根据显存占用情况，推测改参数的上限。


FasterTransformer
    是一个用于实现基于Transformer的神经网络推理的加速引擎。 它包含Transformer块的高度优化版本的实现，其中包含编码器和解码器部分。
    使用此模块，您可以运行编码器-解码器架构模型（如：T5）、仅编码器架构模型（如：BERT）和仅解码器架构模型（如： GPT）的推理。

    FT框架是用C++/CUDA编写的，依赖于高度优化的 cuBLAS、cuBLASLt 和 cuSPARSELt 库，这使您可以在 GPU 上进行快速的 Transformer 推理。

    与NVIDIA TensorRT等其他编译器相比，FT 的最大特点是它支持以分布式方式进行 Transformer 大模型推理。

    下图显示了如何使用张量并行 (TP) 和流水线并行 (PP) 技术将基于Transformer架构的神经网络拆分到多个 GPU 和节点上。

    当每个张量被分成多个块时，就会发生张量并行，并且张量的每个块都可以放置在单独的 GPU 上。
    在计算过程中，每个块在不同的 GPU 上单独并行处理；
    最后，可以通过组合来自多个 GPU 的结果来计算最终张量。
    当模型被深度拆分，并将不同的完整层放置到不同的 GPU/节点上时，就会发生流水线并行。