
Celery是什么？
    Celery 是一个由 Python 编写的简单、灵活、可靠的用来处理大量信息的分布式系统, 
    它同时提供操作和维护分布式系统所需的工具。
    Celery 专注于实时任务处理，支持任务调度。
    说白了，它是一个分布式队列的管理工具，我们可以用 Celery 提供的接口快速实现并管理一个分布式的任务队列。

    首先，我们要理解 Celery 本身不是任务队列，它是管理分布式任务队列的工具，或者换一种说法，
    它封装好了操作（常见任务队列的各种操作），我们用它可以快速进行任务队列的使用与管理，
    当然你也可以自己看 rabbitmq 等队列的文档然后自己实现相关操作都是没有问题的。

    Celery 是语言无关的，虽然它是用 Python 实现的，但他提供了其他常见语言的接口支持。
    只是如果你恰好使用 Python 进行开发那么使用 Celery 就自然而然了。

    Celery 是一个 基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理，
    如果你的业务场景中需要用到异步任务，就可以考虑使用celery， 举几个实例场景中可用的例子:

        1，你想对100台机器执行一条批量命令，可能会花很长时间 ，但你不想让你的程序等着结果返回，
        而是给你返回 一个任务ID,你过一段时间只需要拿着这个任务id就可以拿到任务执行结果， 
        在任务执行ing进行时，你可以继续做其它的事情。 
        2，你想做一个定时任务，比如每天检测一下你们所有客户的资料，如果发现今天 是客户的生日，就给他发个短信祝福
 

Celery是一个灵活而强大的分布式任务队列框架，可以用于各种不同类型的项目和应用。以下是一些可以使用Celery的示例项目：

异步任务处理：
    Celery最常见的用途之一是处理异步任务。您可以使用Celery在后台执行耗时的任务，而无需阻塞应用程序的主线程。
    这对于需要进行大量计算、IO操作或与外部服务进行交互的任务非常有用。
    例如，发送电子邮件、处理图像或视频、数据处理和分析等。
定时任务/调度：
    Celery支持定时任务，您可以设置任务在特定的时间间隔或特定的时间点执行。
    这对于需要定期执行的任务非常有用，如数据备份、定时报告生成、定时数据同步等。
分布式任务处理：
    如果您的项目需要处理大量的并发任务或需要水平扩展以处理更大的工作负载，Celery可以帮助您实现分布式任务处理。
    您可以将任务分发到多个工作进程或多台机器上，从而提高处理能力和吞吐量。
队列任务处理：
    Celery可以用作任务队列系统，用于处理队列中的任务。
    您可以将任务添加到队列中，然后由Celery的工作进程逐个处理任务。
    这对于需要按顺序处理任务或实现任务优先级的项目非常有用。
实时数据处理：
    使用Celery的分布式任务处理能力，您可以构建实时数据处理系统。
    将数据推送到消息队列中，由Celery的工作进程进行实时处理和分析。
    这适用于需要实时数据处理和实时决策的项目，如实时监控、实时推荐系统等。
总而言之，Celery可以用于各种需要异步、分布式、定时或队列任务处理的项目。
它提供了强大的任务调度和分布式处理能力，使得处理复杂任务变得更加简单和高效。


Celery 在执行任务时需要通过一个消息中间件来接收和发送任务消息，以及存储任务结果，
 一般使用rabbitMQ or Redis,后面会讲

Celery有以下优点：

    简单：一旦熟悉了celery的工作流程后，配置和使用还是比较简单的
    高可用：当任务执行失败或执行过程中发生连接中断，celery 会自动尝试重新执行任务
    快速：一个单进程的celery每分钟可处理上百万个任务
    灵活： 几乎celery的各个组件都可以被扩展及自定制


想让 Celery 运行起来我们要明白几个概念：

    1 Brokers
    brokers 中文意思为中间人，在这里就是指任务队列本身，Celery 扮演生产者和消费者的角色，
    brokers 就是生产者和消费者存放/拿取产品的地方(队列)

    常见的 brokers 有 rabbitmq、redis、Zookeeper 等

    2 Result Stores / backend
    顾名思义就是结果储存的地方，队列中的任务运行完后的结果或者状态需要被任务发送者知道，
    那么就需要一个地方储存这些结果，就是 Result Stores 了

    常见的 backend 有 redis、Memcached 甚至常用的数据都可以。

    3 Workers
    就是 Celery 中的工作者，类似与生产/消费模型中的消费者，其从队列中取出任务并执行

    4 Tasks
    就是我们想在队列中进行的任务，一般由用户、触发器或其他操作将任务入队，然后交由 workers 进行处理。
