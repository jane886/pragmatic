"""

为什么用 B+树 而不用 红黑树？

    红黑树是二叉树，B+ 树是多叉树，只需要很少的层数就能实现很大的分支数，减少树的层数可以减少 IO 次数，提高速度
    

    B+树和红黑树都是一种常见的平衡树数据结构，但是他们的应用场景和优缺点都不同

    B+树通常用于磁盘存储和数据库索引，它的特点是
    1，磁盘访问次数少：B+树的叶子节点是一个有序链表，可以按照顺序访问磁盘块，从而减少磁盘访问的次数
    2，更适合范围查询：B+树的叶子节点是一个有序链表，可以快速定位到某个值，并支持范围查询
    3，更高的缓存命中率：B+树的内部节点只存储索引信息，不存储实际数据，因此可以存储更多的索引信息，从而提高缓存命中率
    4，更少的节点分裂：B+树的节点通常比红黑树更大，因此节点分裂的次数更少，从而减少了数据的维护成本

    而红黑树通常用于内存存储和程序中的数据结构，它的特点是：
    1，平衡性好：红黑树的高度比较小，因此可以保证查询和插入的时间复杂度为 O(log n)
    2，支持动态操作：红黑树支持动态插入和删除操作，可以方便的调整数据结构
    3，简单易实现：红黑树的时间比较简单，容易理解和实现

    因此，在实际应用中，B+树更适合于需要在磁盘上存储大量数据，并进行范围查询和排序的场景，而红黑树更适合内存中的数据结构
    和需要支持动态操作的场景。在数据库索引中，B+树的特点更符合实际需求，因此 MySQL 等数据库通常采用 B+uh树索引，而不是红黑树



"""