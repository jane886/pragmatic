"""


mysql 中的常用引擎有哪些？

    1，InnoDB 引擎：MySQL5.5 版本以后的默认存储引擎，支持事务、行级锁、外键等特性，适用于高并发、高可靠性的应用场景

    2，MyISAM 引擎：MySQL 5.5 版本以前的默认存储引擎，不支持事务、行级锁、外键等特性，但是具有较高的性能，适用于读多写少的应用场景，如数据仓库

    3，MEMORY 引擎：将表数据存储在内存中，适用于对查询性能要求较高的应用场景，但是数据存储在内存中容易丢失，不适用于需要持久化存储的数据

    4，NDB Cluster 引擎：适用于分布式、高可用性的应用场景，具有分布式存储、数据共享、高可用性、自动分区等特性

    5，Archive 引擎：适用于需要大量存储历史数据的应用场景，具有高压缩比、快速插入、较慢查询等特性

    6，CSV 引擎：适用于导入、导出 CSV 格式数据的应用场景，但是不支持索引和事务

    7，Blackhole 引擎：将所有写入操作都忽略，适用于数据复制、数据分发等应用场景

    以上是 MySQL 肿的几种常用存储引擎，不同的存储引擎有不同的特性和适用场景，需要根据具体的应用场景来选择合适的存储引擎



    1，InnoDB 引擎：
        支持索引，包括 B-tree 和全文索引等类型的索引，索引存储在 B-tree 结构中，所有查询速度较快
        有 ACID 事务特性，可能保证数据的一致性和完整性
        支持行级锁，可以提高并发性能，避免出现数据的冲突和阻塞
        支持外键约束，可以保证数据的完整性
        使用时需要合理设置参数，例如缓存池大小、日志文件大小等，以便发挥最优的性能
        在进行大批量的数据插入操作时，需要调整事务的提交策略，避免因为事务提交过于频繁而导致性能下降

    2，MyISAM 引擎：
        支持索引，包括 B-tree 和全文索引等类型的索引，索引存储在 B-tree 结构中，所有查询速度较快
        不支持事务，因此在多用户并发操作时容易出现数据冲突和阻塞
        对于表的锁定是针对整个表的，而不是针对单个行的，因此在执行大批量的数据插入操作时，可能会出现表的锁定和性能下降的情况，同时需要
        设置缓冲区大小等参数，以便发挥更优的性能

    3，MEMORY 引擎：
        支持索引，包括 B-tree、hash 和自适应索引，索引存储在内存中，因此查询速度非常快，但是会占用大量的内存空间
        不支持事务，因此不适用于需要保证数据一致性的应用场景
        不支持外键、AUTO_INCREMENT、TEXT 等数据类型
        使用该引擎时，需要注意数据的存储空间，避免因为内存不足而导致数据丢失或缓慢的查询性能

    4，NDB Cluster 引擎：
        支持索引，包括 B-tree、hash 索引等类型的索引，索引存储在内存中，因此查询速度非常快
        具有非常高的可扩展性和可用性，支持自动分区、数据共享、故障转移等特性，可以将数据分散存储在多个节点上，提高数据的存储和访问性能，同时
        可以保证数据的高可用性和容错性
        使用该引擎时，需要注意数据的备份和恢复，以免因为数据丢失而导致数据不一致
        在执行大批量的数据插入操作时，需要设置缓冲区大小等参数，以便发挥更优的性能

    5，Archive 引擎：
        不支持索引，所以查询速度较慢，但是具有非常高的压缩比和存储效率，可以将数据存储在非常小的空间中
        不支持更新、删除操作，只支持插入、查询操作
        此外，由于它使用了压缩算法，因此在进行查询操作时需要先解压缩数据，可能会占用较多的 CPU 资源，

    6，CSV 引擎：
        不支持索引，因此查询速度较慢，但是可以将数据存储在文本文件中，并且可以方便地导入到其他应用程序中
        不支持事务和锁定操作，因此在多用户并发操作时容易出现数据冲突和阻塞
        此外，由于将数据存储在文本文件中，因此数据的安全性可能会受到影响，需要注意数据的备份和恢复

    7，Blackhole 引擎：
        不会存储任何数据，而是将所有的写入操作都丢弃，所有的读取操作都返回空结果集，适用于将数据复制到多个 MySQL 实例中的应用场景
        不支持人任何数据类型和索引，查询速度非常快
        不会将数据存储在任何地方，不需要进行备份和恢复操作
        不会存储任何数据，因此也无法进行查询操作
        使用时需要配置正确的复制策略，以便将数据复制到其他 MySQL 实例中。此外，由于不会存储任何数据，因此也无法进行数据的恢复操作


"""