建立了一张 innodb 的学生表，学号为主键，姓名 name 为索引，画出 name B+ 树的结构。
详细画出叶子节点和根节点，存储什么信息，彼此之间的关系是什么？


    假设学生表的结构如下：
    create table student (
        sno int primary key,
        name varchar (50)
    ) engine = InnoDB;

    其中，sno 是主键，name 是一个普通的索引
    下面是 name 索引的 B+ 树结构示意图：
                 +-----------------+
                 | (name, sno: 1)  |
                 +-----------------+
                 /                 \
       +-----------------+       +-----------------+
       | (name, sno: 2)  |       | (name, sno: 3)  |
       +-----------------+       +-----------------+
       /                 \                /       \
    +-----------------+  +-----------------+  +-----------------+
    | (name, sno: 4)  |  | (name, sno: 5)  |  | (name, sno: 6)  |
    +-----------------+  +-----------------+  +-----------------+
           |                       |               |
           v                       v               v
       +-------+               +-------+       +-------+
       |  data |               |  data |       |  data |
       +-------+               +-------+       +-------+


    图中，每个节点表示一个索引项，包含了索引值和对应的主键值。最底层的节点包含了实际的数据行，即 (name, sno)对应的数据。
    注意到每个节点都是按照索引值排序的，因此可以通过 B+ 树结构快速地定位到需要的数据行

    下面是 B+ 树的叶子节点的详细结构：

    +-----------------+
    | (name, sno) = A |
    +-----------------+
    |        1        |
    +-----------------+
    叶子节点存储了 (name, sno) 的值和对应的主键值。在本例子中，叶子节点存储了 (name, sno) 为 A 的所有数据行的主键值（假设有一些学生的名字是 A）

    下面是 B+ 树的根节点的详细结构：

    +-----------------+
    | (name, sno) = A |
    +-----------------+
    |  child pointer 1 |
    +-----------------+
    |  child pointer 2 |
    +-----------------+
    |  child pointer 3 |
    +-----------------+
    根节点存储了一个索引项，它的值是  (name, sno)，指向了下一层的子节点。在本例子中，根节点的 (name, sno) 值也是 A，因此它指向了
    同层的三个子节点

    节点之间的关系是，每个节点都有指向其子节点的指针，而叶子节点则没有子节点指针。另外，所有的叶子节点都连接在一起，形成了一个双向链表，
    方便进行范围查询

    需要注意的是，InnoDB 存储引擎的 B+ 树结构包括了聚簇索引和普通索引两种类型。聚簇索引是按照主键值进行排序的，因此叶子节点包含了完整
    的数据行。可以直接返回给查询操作。而普通索引则是按照索引值来进行排序的，叶子节点只包含了索引值和对应的主键值，需要通过主键值再次查找数据行

    对于上面の例子，如果 sno 是一个聚簇索引（即主键），那么 B+ 树的结构如下：
                     +-----------------+
                     |       (1)       |
                     +-----------------+
                     /                 \
       +-----------------+       +-----------------+
       |       (2)       |       |       (3)       |
       +-----------------+       +-----------------+
       /                 \                /       \
    +-----------------+  +-----------------+  +-----------------+
    |       (4)       |  |       (5)       |  |       (6)       |
    +-----------------+  +-----------------+  +-----------------+
           |                       |               |
           v                       v               v
       +-------+               +-------+       +-------+
       |  data |               |  data |       |  data |
       +-------+               +-------+       +-------+

    其中，括号里的数字表示了主键值（即 sno）的值。可以看到，B+ 树的结构和上面的例子基本相同，只是叶子节点存储的事完整的数据行，
    而不是（name，sno）对应的数据。

    需要注意的是，InnoDB 存储引擎的聚簇索引和普通索引都是 B+ 树结构，区别在于叶子节点的内容不同。聚簇索引的叶子节点包含了完整的数据行，
    因此可以直接返回给查询操作，而普通索引的叶子节点只包含了索引值和对应的主键值，需要再次查找数据行
